SELECT current_database();
\dt
CREATE TABLE client (    id SERIAL PRIMARY KEY,    name VARCHAR(100),    tel VARCHAR(20),    createAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    utilisateur_id INT);
SELECT current_user;  -- Pour voir l'utilisateur actuel
GRANT ALL PRIVILEGES ON SCHEMA public TO yafily;
\du
SELECT * FROM information_schema.role_usage_grants WHERE grantee = 'yafily';
psql -U yafily -d gestiondetteCREATE TABLE client (    id SERIAL PRIMARY KEY,    name VARCHAR(100),    email VARCHAR(100),    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
\q
CREATE TABLE client (    id SERIAL PRIMARY KEY,    name VARCHAR(100),    email VARCHAR(100),    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO yafily;
ALTER USER yafily CREATEDB;
ALTER USER yafily WITH CREATEDB CREATEROLE;
\du yafily
ALTER USER yafily WITH SUPERUSER; 
ALTER USER yafily WITH CREATEDB;
ALTER USER yafily WITH CREATEROLE;
\q
CREATE TABLE client (    id SERIAL PRIMARY KEY,    name VARCHAR(100),    email VARCHAR(100),    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
GRANT ALL PRIVILEGES ON DATABASE gestiondette TO yafily;
\du
GRANT ALL PRIVILEGES ON SCHEMA public TO yafily;
sudo -u postgres psql
\q
nCREATE TABLE client (    id SERIAL PRIMARY KEY,    name VARCHAR(100),    email VARCHAR(100),    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
CREATE TABLE client (    id SERIAL PRIMARY KEY,    name VARCHAR(100),    email VARCHAR(100),    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)
\du
\du
\du
\du
SELECT has_database_privilege('yafily', 'gestiondette', 'CONNECT');
SELECT has_database_privilege('yafily', 'gestiondette', 'CREATE');
SELECT has_schema_privilege('yafily', 'public', 'USAGE');
SELECT has_schema_privilege('yafily', 'public', 'CREATE');
\c gestiondette
GRANT ALL PRIVILEGES ON DATABASE gestiondette TO yafily;
GRANT ALL PRIVILEGES ON SCHEMA public TO yafily;
\du
\q
sudo service postgresql restart
\dt
\c
\l
CREATE TABLE client (    id SERIAL PRIMARY KEY,    name VARCHAR(100),    email VARCHAR(100),    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
CREATE TABLE client (    id SERIAL PRIMARY KEY,    name VARCHAR(100),    email VARCHAR(100),    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
\q
SELECT t0.id AS id_1, t0.name AS surname_2, t0.tel AS tel...SELECT t0.id AS id_1, t0.name AS name_2, t0.tel AS tel_3 FROM votre_table t0q
\q
SELECT column_nameFROM information_schema.columnsWHERE table_name = 'client'; 
SELECT t0.id AS id_1, t0.name AS surname_2, t0.tel AS tel...php bin/console make:migrationphp bin/console doctrine:migrations:migrate
\Q
\q
SELECT * FROM clients;
SELECT * FROM client ;
ALTER TABLE clients ADD COLUMN email VARCHAR(255);
ALTER TABLE client ADD COLUMN email VARCHAR(255);
ALTER TABLE client ADD COLUMN surname VARCHAR(255);
\q
ALTER TABLE client ADD COLUMN tel VARCHAR(255);
ALTER TABLE client ADD COLUMN address VARCHAR(255);
\q
ALTER TABLE client ADD COLUMN umulMontantDu VARCHAR(255);
ALTER TABLE client ADD COLUMN status VARCHAR(255);
ALTER TABLE client ADD COLUMN utilisateur VARCHAR(255);
ALTER TABLE client ADD COLUMN dette VARCHAR(255);
\q
ALTER TABLE client ADD COLUMN cumulMontantDu VARCHAR(255);
\q
SELECT id, surname, tel, address, cumulmontantdu FROM clients;
SELECT id, surname, tel, address, cumulmontantdu FROM cliens;
SELECT id, surname, tel, address, cumulmontantdu FROM client;
ALTER TABLE clients RENAME COLUMN cumulmontantdu TO cumul_montant_du;
ALTER TABLE client RENAME COLUMN cumulmontantdu TO cumul_montant_du;
\q
ALTER TABLE client ADD COLUMN createAt VARCHAR(255);
\q
\dt
SELECT * FROM  client;
ALTER TABLE client ALTER COLUMN age TYPE float; 
ALTER TABLE client ALTER COLUMN cumul_montant TYPE float; 
SELECT * FROM  client;
ALTER TABLE client ALTER COLUMN cumul_montant_du TYPE float; 
ALTER TABLE client ADD COLUMN montant_total float;
ALTER TABLE dette ADD COLUMN montant_total float;
ALTER TABLE dette ADD COLUMN montant_verser float;
ALTER TABLE dette ADD COLUMN created_at float;
ALTER TABLE dette ADD COLUMN create_at float;
ALTER TABLE dette ADD COLUMN update_at float;
ALTER TABLE dette ADD COLUMN client varchar(25);
ALTER TABLE dette ADD COLUMN client_id int;
INSERT INTO votre_table (colonne_double, colonne_date)VALUES (123.45, '2024-10-19 20:23:45'); -- Assurez-vous que les types correspondent
INSERT INTO dette (colonne_double, colonne_date)VALUES (123.45, '2024-10-19 20:23:45'); 
ALTER TABLE dette  ALTER COLUMN date TYPE double precision ; 
ALTER TABLE dette  ALTER COLUMN create_at TYPE DateTimeImmutable ; 
ALTER TABLE dette  ALTER COLUMN create_at TYPE DateTime ; 
ALTER TABLE dette  ALTER COLUMN create_at TYPE double decision ; 
ALTER TABLE dette  ALTER COLUMN create_at TYPE double precision ; 
ALTER TABLE dette  ALTER COLUMN update_at TYPE double precision ; 
\d dette
ALTER TABLE detteALTER COLUMN montanttotal TYPE double precision USING NULLIF(montanttotal, '')::double precision,ALTER COLUMN montantverser TYPE double precision USING NULLIF(montantverser, '')::double precision,ALTER COLUMN create_at TYPE timestamp without time zone USING to_timestamp(create_at)::timestamp without time zone,ALTER COLUMN update_at TYPE timestamp without time zone USING to_timestamp(updateat)::timestamp without time zone,DROP COLUMN createat,  -- Si vous n'avez plus besoin de cette colonneDROP COLUMN updateat;  -- Si vous n'avez plus besoin de cette colonne
ALTER TABLE detteALTER COLUMN montanttotal TYPE double precision USING NULLIF(montanttotal, '')::double precision,ALTER COLUMN montantverser TYPE double precision USING NULLIF(montantverser, '')::double precision,ALTER COLUMN create_at TYPE timestamp without time zone USING to_timestamp(create_at)::timestamp without time zone,ALTER COLUMN update_at TYPE timestamp without time zone USING to_timestamp(updateat)::timestamp without time zone,ALTER TABLE detteALTER COLUMN create_at TYPE timestamp without time zone USING to_timestamp(create_at, 'YYYY-MM-DD HH24:MI:SS'),ALTER COLUMN update_at TYPE timestamp without time zone USING to_timestamp(update_at, 'YYYY-MM-DD HH24:MI:SS'),ALTER COLUMN montant_total TYPE double precision USING NULLIF(montant_total, '')::double precision,ALTER COLUMN montant_verser TYPE double precision USING NULLIF(montant_verser, '')::double precision;
ALTER TABLE dette     ALTER COLUMN create_at TYPE timestamp without time zone USING to_timestamp(create_at, 'YYYY-MM-DD HH24:MI:SS'),    ALTER COLUMN update_at TYPE timestamp without time zone USING to_timestamp(update_at, 'YYYY-MM-DD HH24:MI:SS'),    ALTER COLUMN montant_total TYPE double precision USING NULLIF(montant_total, '')::double precision,    ALTER COLUMN montant_verser TYPE double precision USING NULLIF(montant_verser, '')::double precision;
\d dette
ALTER TABLE dette     ALTER COLUMN create_at TYPE timestamp without time zone USING to_timestamp(create_at),    ALTER COLUMN update_at TYPE timestamp without time zone USING to_timestamp(update_at);
ALTER TABLE dette     ALTER COLUMN create_at TYPE timestamp without time zone USING to_timestamp(create_at, 'YYYY-MM-DD HH24:MI:SS'),    ALTER COLUMN update_at TYPE timestamp without time zone USING to_timestamp(update_at, 'YYYY-MM-DD HH24:MI:SS');
ALTER TABLE dette     ALTER COLUMN montant_total TYPE double precision USING NULLIF(montant_total, '')::double precision,    ALTER COLUMN montant_verser TYPE double precision USING NULLIF(montant_verser, '')::double precision;
UPDATE dette SET montant_total = NULL WHERE montant_total = '';
UPDATE dette SET montant_verser = NULL WHERE montant_verser = '';
UPDATE dette SET montant_total = '0' WHERE montant_total = '';
UPDATE dette SET montant_verser = '0' WHERE montant_verser = '';
UPDATE dette SET montant_total = '0' WHERE montant_total = '';
UPDATE dette SET montant_verser = '0' WHERE montant_verser = '';
ALTER TABLE dette     ALTER COLUMN montant_verser TYPE character varying(100);
UPDATE dette SET montant_verser = '0' WHERE montant_verser = '';
ALTER TABLE dette     ALTER COLUMN montant_verser TYPE double precision USING NULLIF(montant_verser, '')::double precision;
ALTER TABLE dette     ALTER COLUMN montant_total TYPE character varying(100);
UPDATE dette SET montant_total = '0' WHERE montant_total = '';
ALTER TABLE dette     ALTER COLUMN montant_total TYPE double precision USING NULLIF(montant_total, '')::double precision;
\d dette
\d user
\d "User"
ALTER TABLE "User"RENAME TO utilisateur; 
ALTER TABLE "utilisateur"RENAME TO "user"; 
ALTER TABLE "user"RENAME TO 'user'; 
\d "user"
ALTER TABLE "user"     ALTER COLUMN create_at TYPE DateTimeImmutable;
ALTER TABLE "user"     ALTER COLUMN update_at TYPE DateTimeImmutable;
CREATE SEQUENCE user_id_seq;
ALTER TABLE "User" ALTER COLUMN id SET DEFAULT nextval('user_id_seq');
ALTER TABLE "user" ALTER COLUMN id SET DEFAULT nextval('user_id_seq');
php bin/console doctrine:migrations:migrateSELECT setval('user_id_seq', (SELECT MAX(id) FROM "User"));
php bin/console doctrine:migrations:migrateSELECT setval('user_id_seq', (SELECT MAX(id) FROM "user"));
q\
q \
\q
\ds
DROP SEQUENCE client_id_seq;
ALTER TABLE client ALTER COLUMN id DROP DEFAULT;
DROP SEQUENCE client_id_seq;
CREATE SEQUENCE client_id_seq;
ALTER TABLE client ALTER COLUMN id SET DEFAULT nextval('client_id_seq');
\q
\ds
GRANT USAGE, SELECT ON SEQUENCE user_id_seq TO yafily;
\d "User"
\d "user"
SELECT setval('user_id_seq', (SELECT COALESCE(MAX(id), 1) FROM "User"));
SELECT setval('user_id_seq', (SELECT COALESCE(MAX(id), 1) FROM "user"));
SELECT setval('user_id_seq', (SELECT COALESCE(MAX(id), 1) FROM "user"));
\q
SELECT * FROM client;
SELECT last_value FROM client_id_seq;
SELECT MAX(id) FROM client;
SELECT setval('client_id_seq', (SELECT COALESCE(MAX(id), 1) FROM client));
SELECT * FROM client;
DELETE FROM client WHERE id = 1;  -- Remplacez 1 par l'id du client que vous voulez supprimer
DELETE FROM client WHERE id = 2;  -- Remplacez 1 par l'id du client que vous voulez supprimer
DELETE FROM client WHERE id = 4;  -- Remplacez 1 par l'id du client que vous voulez supprimer
\d "user"
... ON t8.utilisateur_id::integer = t0.id ...SELECT * FROM "user" t0 LEFT JOIN client t8 ON t8.utilisateur_id = t0.id ...SELECT * FROM "user" t0 LEFT JOIN client t8 ON t8.utilisateur_id::integer = t0.id ...SELECT * FROM "user" t0LEFT JOIN client t8 ON t8.utilisateur_id::integer = t0.id ...DELETE FROM client WHERE id = 1;  -- Remplacez 1 par l'id du client que vous voulez supprimer
\d client
SELECT * FROM "user" t0 LEFT JOIN client t8 ON t8.utilisateur_id::integer = t0.id;
\d client
SELECT DISTINCT utilisateur_id FROM client;
ALTER TABLE clientALTER COLUMN utilisateur_id TYPE integer USING utilisateur_id::integer;
\d client
